# vim: set ft=sh:
[toplevel]

clone =
  !f() {
    set -e

    if [ $1 = "--ghq" ]
    then
      cmd="ghq get"
      repo_name="$2"
    elif [ $1 = "--git" ]
    then
      cmd="git clone"
      repo_name="$2"
    else
      if ghq --version >/dev/null 2>&1
      then
        cmd="ghq get"
      else
        cmd="git clone"
      fi
      repo_name="$1"
    fi

    if [ -z $repo_name ]
    then
      repo_name=$(aws codecommit list-repositories |jq -r '.repositories[].repositoryName' |fzf --header="clone repository")
    fi

    info=$(aws codecommit get-repository --repository-name "$repo_name")
    account_id=$(echo "$info" |jq -r .repositoryMetadata.accountId)
    repo_arn=$(echo "$info" |jq -r .repositoryMetadata.Arn)
    grc_url=$(echo ${repo_arn} |sed -r 's/.+:codecommit:(.+):'${account_id}':(.+)/codecommit::\1:\/\/\2/')
    $cmd "${grc_url}"
  }; f

pipeline-check =
  !f() {
    set -e

    pipeline_name="$1"

    if [ -z $pipeline_name ]
    then
      pipeline_name=$(aws codepipeline list-pipelines |jq -r '.pipelines[].name' |fzf --header="check pipeline status")
    fi

    echo "${pipeline_name}"
    aws codepipeline get-pipeline-state --name "$pipeline_name" |
      jq -r '.stageStates[]' |
      jq -r '. |walk(if try todate catch false then todate else . end)' |
      jq -r '.stageName,.actionStates[]'
  }; f

pipeline-wait =
  !f() {
    set -e

    pipeline_name="$1"

    if [ -z $pipeline_name ]
    then
      pipeline_name=$(aws codepipeline list-pipelines |jq -r '.pipelines[].name' |fzf --header="check pipeline status")
    fi

    echo "waiting ${pipeline_name} end"
    for i in `seq 60`
    do
      inprogress=$(aws codepipeline get-pipeline-state --name "$pipeline_name" |
        jq -r 'reduce .stageStates[].actionStates[] as $state (false; . | $state == "InProgress")')
      if [ "$inprogress" = "false" ]
      then
        break
      fi
      printf "."
    done

    echo "done"
  }; f

cfn-check =
  !f() {
    set -e

    stack_name="$1"

    if [ -z $stack_name ]
    then
      stack_name=$(aws cloudformation describe-stacks |jq -r '.Stacks[].StackName' |fzf --header="check CFn stack events")
    fi

    echo "${stack_name}"
    aws cloudformation describe-stack-events --stack-name "$stack_name" |jq -r '.StackEvents[] |select(.ResourceStatus |endswith("FAILED"))'
  }; f

cfn-delete =
  !f() {
    set -e

    stack_name="$1"

    if [ -z $stack_name ]
    then
      stack_name=$(aws cloudformation describe-stacks |jq -r '.Stacks[].StackName' |fzf --header="DELETE CFn stack")
    fi

    aws cloudformation delete-stack --stack-name "$stack_name"
  }; f

cfn-wait =
  !f() {
    set -e

    stack_name="$1"

    if [ -z $stack_name ]
    then
      stack_name=$(aws cloudformation describe-stacks |jq -r '.Stacks[].StackName' |fzf --header="wait CFn stack update")
    fi

    for i in `seq 60`
    do
      status=$(aws cloudformation describe-stacks --stack-name "$stack_name" |jq -r '.Stacks[0].StackStatus')
      if [ $(echo ${status} |grep _IN_PROGRESS$ |wc -l) -eq 1 ]
      then
        printf "."
      else
        break
      fi
      sleep 1
    done

    echo "$status"
  }; f

cfn-update =
  !f() {
    set -e

    stack_name="$1"
    template_file="$2"

    if [ -z $stack_name ]
    then
      stack_name=$(aws cloudformation describe-stacks |jq -r '.Stacks[].StackName' |fzf --header="update CFn stack")
    fi

    if [ -z $template_file ]
    then
      template_file=$(fzf --header="select template file to upload")
    fi

    transform=$(yq e '.Transform |select(. != null)' "$template_file")
    if [ "$(echo "$transform" |cut -c 1-16)" = "AWS::Serverless-" ]
    then
      # TODO: Use previous value for parameters
      aws cfn-deploy "$template_file" "$stack_name"
      exit 0
    fi

    template_body="file://${template_file}"

    parameters=""
    for p in $(aws cloudformation describe-stacks --stack-name $stack_name |jq -r '.Stacks[].Parameters[].ParameterKey')
    do
      parameters="$parameters ParameterKey=$p,UsePreviousValue=true"
    done

    cmd="aws cloudformation update-stack \
      --stack-name $stack_name \
      --template-body $template_body \
      --parameters $parameters \
      --capabilities CAPABILITY_NAMED_IAM"

    echo $cmd
    $cmd
  }; f

cfn-deploy =
  !f() {
    set -e

    template_file="$1"
    stack_name="$2"

    if [ -z $stack_name ]
    then
      read -p "Stack Name: " stack_name
    else
      echo "Stack Name: ${stack_name}"
    fi

    if [ -z $template_file ]
    then
      template_file=$(fzf --header="select template file to upload")
    fi
    echo "Template File: ${template_file}"

    transform=$(yq e '.Transform |select(. != null)' "$template_file")
    if [ "$(echo "$transform" |cut -c 1-16)" = "AWS::Serverless-" ]
    then
      is_sam=true
    else
      is_sam=false
    fi

    parameters=""
    for parameter_name in $(yq e '.Parameters |keys' "$template_file" |sed 's/^- //')
    do
      default=$(yq e '.Parameters.'"${parameter_name}"'.Default |select(. != null)' $template_file)
      if [ -z $default ]
      then
        prompt="${parameter_name}: "
      else
        prompt="${parameter_name}($default): "
      fi
      read -p "${prompt}" val
      if [ ! -z $val ]
      then
        parameters="$parameters $parameter_name=$val"
      fi
    done

    if $is_sam
    then
      deploy_cmd="sam deploy"
    else
      deploy_cmd="aws cloudformation deploy"
    fi

    cmd="${deploy_cmd} \
      --stack-name $stack_name \
      --template-file $template_file \
      --parameter-overrides $parameters \
      --capabilities CAPABILITY_NAMED_IAM"
    echo $cmd
    $cmd
  }; f

vault-exec =
  !f() {

  }; f
