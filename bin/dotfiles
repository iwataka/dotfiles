#!/usr/bin/env python3

import argparse
import os
import platform
import shutil
from enum import Enum
from typing import Optional


class OS(Enum):
    LINUX = 1
    DARWIN = 2
    WINDOWS = 3

    @staticmethod
    def check():
        if platform.system() == "Linux":
            return OS.LINUX
        elif platform.system() == "Darwin":
            return OS.DARWIN
        elif platform.system() == "Windows":
            return OS.WINDOWS
        else:
            raise Exception(f"Unsupported system name {platform.system()}")


class SymLink:
    name: str
    dest: str
    recurse: bool

    def __init__(
        self,
        name: str,
        dest: Optional[str] = None,
        recurse: bool = False,
    ):
        self.name = name
        self.dest = dest or os.path.join(HOME_DIR, f".{name}")
        self.recurse = recurse


HOME_DIR = os.path.expanduser("~")
GIT_URL = "https://github.com/iwataka/dotfiles"


def common_symlinks():
    yield SymLink("agignore")
    yield SymLink("atom")
    yield SymLink("aws", recurse=True)
    yield SymLink("bashrc")
    yield SymLink("bin", os.path.join(HOME_DIR, "bin"), recurse=True)
    yield SymLink("ctags")
    yield SymLink("curlrc")
    yield SymLink("editorconfig")
    yield SymLink("elvish")
    yield SymLink("emacs.d")
    yield SymLink("ghci")
    yield SymLink("gitconfig")
    yield SymLink("gnupg", recurse=True)
    yield SymLink("goneovim")
    yield SymLink("hyper.js")
    yield SymLink("ideavimrc")
    yield SymLink("peco")
    yield SymLink("sbt")
    yield SymLink("sbtrc")
    yield SymLink("sh")
    yield SymLink("shrc")
    yield SymLink("spacemacs")
    yield SymLink("tigrc")
    yield SymLink("tmux.conf")
    yield SymLink("vim")
    yield SymLink("vimperatorrc")
    yield SymLink("vimrc")
    yield SymLink("wezterm.lua")
    yield SymLink("wgetrc")


def specific_symlinks(_os: OS):
    if _os in [OS.LINUX, OS.DARWIN]:
        yield SymLink("Xresources")
        yield SymLink("zsh")
        yield SymLink("zshenv")
        yield SymLink("zshrc")
        yield SymLink(
            "vim",
            os.path.join(HOME_DIR, ".config", "nvim"),
        )
        yield SymLink(
            "fish",
            os.path.join(HOME_DIR, ".config", "fish"),
        )
        yield SymLink(
            "alacritty",
            os.path.join(HOME_DIR, ".config", "alacritty"),
        )
        yield SymLink(
            "starship.toml",
            os.path.join(HOME_DIR, ".config", "starship.toml"),
        )

    if _os == OS.DARWIN:
        yield SymLink(
            "bashrc",
            os.path.join(HOME_DIR, ".bash_profile"),
        )

    if _os == OS.WINDOWS:
        appdata = os.environ["APPDATA"]
        localappdata = os.environ["LOCALAPPDATA"]

        yield SymLink(
            "alacritty",
            os.path.join(appdata, "alacritty"),
        )
        yield SymLink(
            "sublime",
            os.path.join(appdata, "Sublime Text 3", "Packages", "User"),
        )
        yield SymLink(
            "vim",
            os.path.join(localappdata, "nvim"),
        )
        # TODO: Starship config


def remove_or_backup(src, dst):
    remove_symlink_nonrecursively(src, dst)
    if os.path.isfile(dst):
        shutil.move(src=dst, dst=f"{dst}.bak")
        print(f"backup {dst}")


def remove_symlink(root_dir, sl: SymLink):
    operate_symlink(
        root_dir, sl, remove_symlink_recursively, remove_symlink_nonrecursively
    )


def remove_symlink_nonrecursively(_, dst):
    if os.path.islink(dst):
        os.remove(dst)


def remove_symlink_recursively(src, dst):
    operate_files_recursively(src, dst, remove_symlink_nonrecursively)


def symlink(root_dir, sl: SymLink):
    operate_symlink(root_dir, sl, symlink_recursively, symlink_nonrecursively)


def operate_symlink(root_dir, sl: SymLink, op_recursively, op_nonrecursively):
    src = os.path.join(root_dir, sl.name)
    if sl.recurse:
        op_recursively(src, sl.dest)
    else:
        op_nonrecursively(src, sl.dest)


def symlink_nonrecursively(src, dst):
    remove_or_backup(src, dst)
    os.makedirs(os.path.dirname(dst), exist_ok=True)
    os.symlink(src, dst)


def symlink_recursively(src, dst):
    remove_symlink_nonrecursively(src, dst)
    operate_files_recursively(src, dst, symlink_nonrecursively)


def operate_files_recursively(src, dst, op):
    for dir, _, fnames in os.walk(src):
        for fname in fnames:
            src_file = os.path.abspath(os.path.join(dir, fname))
            dst_file = os.path.abspath(
                os.path.join(dst, os.path.relpath(src_file, src))
            )
            op(src_file, dst_file)


def operate_all_symlinks(root_dir, op):
    for sl in common_symlinks():
        op(root_dir, sl)

    for sl in specific_symlinks(OS.check()):
        op(root_dir, sl)


def install(args):
    root_dir = args.root_dir
    if not os.path.exists(root_dir):
        os.system(f"git clone --depth=1 {GIT_URL} {root_dir}")
    operate_all_symlinks(root_dir, symlink)


def update(args):
    root_dir = args.root_dir
    if os.path.exists(root_dir):
        os.system(f"git -C {root_dir} pull")
    install(args)


def uninstall(args):
    root_dir = args.root_dir
    operate_all_symlinks(root_dir, remove_symlink)
    print(f"Please delete {root_dir} manually to uninstall completely.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="dotfiles utility command")
    parser.add_argument(
        "-r",
        "--root-dir",
        type=str,
        default=os.path.join(HOME_DIR, ".dotfiles"),
    )

    subparsers = parser.add_subparsers()

    install_parser = subparsers.add_parser(
        "install",
        help="install and setup dotfiles",
    )
    install_parser.set_defaults(func=install)

    update_parser = subparsers.add_parser(
        "update",
        help="update dotfiles",
    )
    update_parser.set_defaults(func=update)

    uninstall_parser = subparsers.add_parser(
        "uninstall",
        help="uninstall dotfiles",
    )
    uninstall_parser.set_defaults(func=uninstall)

    args = parser.parse_args()
    args.func(args)
