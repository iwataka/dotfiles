{
  "name": "incremental-search",
  "main": "./lib/isearch",
  "version": "4.1.0",
  "description": "Incremental search for Atom",
  "activationEvents": [
    "incremental-search:forward",
    "incremental-search:backward"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mkleehammer/atom-incremental-search"
  },
  "bugs": {
    "url": "https://github.com/mkleehammer/atom-incremental-search/issues"
  },
  "license": "MIT",
  "engines": {
    "atom": ">0.50.0"
  },
  "dependencies": {
    "emissary": "1.x",
    "underscore-plus": "1.x"
  },
  "readme": "# incremental-search package\n\nAn incremental search package for Atom designed for fast navigation.\n\nPress `cmd-i` (OS X) or `ctrl-i` (Windows & Linux) and start typing what you want to find - the\npackage will highlight all instances of what you've typed so far and scroll to the closest\nresult.  Each time you type a character or change the search string, the results are updated\non the fly and the editor is scrolled to the new results.\n\nTo move the cursor forward to the next result, press `cmd-i`/`ctrl-i` again.  To move backwards\nto a previous result press `shift-cmd-i` / `shift-ctrl-i`.  Using these while in the find\neditor will quickly move you through file.\n\nWhen you've found the text you are looking for, press `enter` to stop the search and leave the\ncursor on the search result.  To cancel the search and return to where you started, press `esc`.\n\n## Slurping\n\nIn the find control, pressing `cmd-e` (OS X) or `ctrl-e` (Windows & Linux) will copy text from\nthe text editor into the find control.\n\nWhen a search is started, the find control is empty.  If there is a selection in the text\neditor, the first slurp will copy it.  Otherwise it will copy from the cursor to the end of the\ncurrent word.\n\nOnce a search has begun, slurping copies from the end of the current result to the next word\nboundary.  If a search has begun and there are no results, slurping will do nothing.\n\n## Search Options\n\nThe package supports both case sensitive searching and regular expressions.  The state of the\noptions are displayed next to the search pane's title:\n\n![no options](http://mkleehammer.github.com/atom-incremental-search/images/label-no-options.png)\n\n![options](http://mkleehammer.github.com/atom-incremental-search/images/label-options.png)\n\nYou can toggle the options using the buttons on the right of the pane or using `cmd-r` (regular\nexpression) and `cmd-c` (case sensitivity):\n\n![buttons](http://mkleehammer.github.com/atom-incremental-search/images/buttons.png)\n\nThese options are normally turned off when a search is stopped or canceled so the next search\nstarts without them.  The package setting \"Keep Options After Search\" will cause the options to\nbe kept for the next search.\n\n## Selection and History\n\nWhen you start a search the search editor is normally empty.  Pressing `cmd-i` or `shift-cmd-i`\nagain will populate the search with the last used search.\n\nAt this time only 1 previous search is remembered and it is not stored between sessions.\nIn an update, more history will be stored and each history item will record the options used.\nThe history will also be stored between sessions.\n\n## Overriding Styles\n\nThe default result styles are copied from Atom's find-and-replace package so it will look\nfamiliar, but it uses custom classes which you can style.  To style the current result use\n`.editor .isearch-current .region`.  To style other results `.editor .isearch-result .region`.\n\nFor example, to change the border around the current search result to red, you would add\nthe following to your ~/.atom/styles.less file:\n\n```css\n.editor .isearch-current .region {\n  border: 1px solid red;\n}\n```\n\n## Key Binding Summary\n\n### OS X\n\nTo start an incremental search:\n\n* `cmd-i` - start a forward incremental search\n* `shift-cmd-i` - start a backward incremental search\n\nOnce you've started an incremental search:\n\n* type text characters to search - the results are updated\n* `cmd-i` - move cursor forward to next result\n* `shift-cmd-i` - move cursor backward to previous result\n* `cmd-e` - slurp\n* `return` - stop the search and leave the cursor where it is\n* `esc` - cancel the search and return the cursor to where it was before searching\n* `cmd-r` - toggle regular expressions\n* `cmd-c` - toggle case sensitivity\n* `cmd-enter` - set focus to the text editor without canceling search\n\n### Windows & Linux\n\nTo start an incremental search:\n\n* `ctrl-i` - start a forward incremental search\n* `shift-ctrl-i` - start a backward incremental search\n\nOnce you've started an incremental search:\n\n* type text characters to search - the results are updated\n* `ctrl-i` - move cursor forward to next result\n* `shift-ctrl-i` - move cursor backward to previous result\n* `ctrl-e` - slurp\n* `return` - stop the search and leave the cursor where it is\n* `esc` - cancel the search and return the cursor to where it was before searching\n* `ctrl-r` - toggle regular expressions\n* `ctrl-c` - toggle case sensitivity\n* `ctrl-enter` - set focus to the text editor without canceling search\n\n### emacs\n\nThere is no built in emacs compatibility, but you can get close by remapping three keys. You\nwill want to copy the keymap from this package into your private keymap.  Note the \".isearch\"\nclass maps keys inside of the incremental-search pane so that `ctrl-w` does not override\nmappings in your text editor.\n\n```\n'.platform-darwin .workspace .editor:not(.mini)':\n  'ctrl-s': 'incremental-search:forward'\n  'ctrl-r': 'incremental-search:backward'\n\n'.platform-darwin .workspace .isearch .editor':\n  'ctrl-s': 'incremental-search:forward'\n  'ctrl-r': 'incremental-search:backward'\n  'ctrl-w' : 'incremental-search:slurp'\n```\n\n## Differences From Atom's Find\n\nThis is heavily based on Atom's find-and-replace package and I appreciate their hard work.\nThere is no reason the features of this package cannot be merged into the find-and-replace\npackage if the functionality is found useful.\n\nThe intention of this package is to improve *navigation*.  Advanced users of editors like vi\nand emacs often excel at moving around in files - in fact, often incremental search is the\n *default* method of moving around.  Pressing arrow keys 10 times or waiting for key repeat\ntimers is very slow.\n\nThis leads to these design elements:\n\n* Searching must be incremental - the editor location must move while you type.\n* The input cursor must stay in the search control so the search text can be quickly updated.\n* Stopping the search and staying should be easy (Enter).\n* Canceling the search and returning to the original location must also be easy (Esc).\n* It must be easy to stop a search, make a change, and restart the search (e.g. cmd-i twice)\n\nAdditionally, the key binding \"footprint\" is as small as possible.  Most keys only take effect\nonce a search has started.  Atom is in real danger of using up all of the keys which is not\ngood for a project designed for extensibility.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mkleehammer/atom-incremental-search",
  "_id": "incremental-search@4.1.0",
  "dist": {
    "shasum": "e9201843ad087b25a38d60b2535b1721dc2b8eaf"
  },
  "_resolved": "C:\\Cygwin\\tmp\\d-1141118-3336-aard9f\\package.tgz",
  "_from": "C:\\Cygwin\\tmp\\d-1141118-3336-aard9f\\package.tgz",
  "_atomModuleCache": {
    "version": 1,
    "dependencies": [
      {
        "name": "emissary",
        "version": "1.3.1",
        "path": "node_modules\\emissary\\lib\\emissary.js"
      },
      {
        "name": "harmony-collections",
        "version": "0.3.7",
        "path": "node_modules\\emissary\\node_modules\\harmony-collections\\harmony-collections.js"
      },
      {
        "name": "mixto",
        "version": "1.0.0",
        "path": "node_modules\\emissary\\node_modules\\mixto\\lib\\mixin.js"
      },
      {
        "name": "property-accessors",
        "version": "1.1.0",
        "path": "node_modules\\emissary\\node_modules\\property-accessors\\lib\\property-accessors.js"
      },
      {
        "name": "harmony-collections",
        "version": "0.3.7",
        "path": "node_modules\\emissary\\node_modules\\property-accessors\\node_modules\\harmony-collections\\harmony-collections.js"
      },
      {
        "name": "underscore-plus",
        "version": "1.6.5",
        "path": "node_modules\\underscore-plus\\lib\\underscore-plus.js"
      },
      {
        "name": "underscore",
        "version": "1.6.0",
        "path": "node_modules\\underscore-plus\\node_modules\\underscore\\underscore.js"
      }
    ],
    "extensions": {
      ".coffee": [
        "lib\\input-view.coffee",
        "lib\\isearch.coffee",
        "lib\\search-model.coffee"
      ],
      ".js": [
        "node_modules\\emissary\\lib\\behavior.js",
        "node_modules\\emissary\\lib\\emissary.js",
        "node_modules\\emissary\\lib\\emitter.js",
        "node_modules\\emissary\\lib\\helpers.js",
        "node_modules\\emissary\\lib\\signal.js",
        "node_modules\\emissary\\lib\\subscriber.js",
        "node_modules\\emissary\\lib\\subscription.js",
        "node_modules\\emissary\\node_modules\\harmony-collections\\harmony-collections.js",
        "node_modules\\emissary\\node_modules\\harmony-collections\\harmony-collections.min.js",
        "node_modules\\emissary\\node_modules\\mixto\\lib\\mixin.js",
        "node_modules\\emissary\\node_modules\\property-accessors\\lib\\property-accessors.js",
        "node_modules\\emissary\\node_modules\\property-accessors\\node_modules\\harmony-collections\\harmony-collections.js",
        "node_modules\\emissary\\node_modules\\property-accessors\\node_modules\\harmony-collections\\harmony-collections.min.js",
        "node_modules\\underscore-plus\\lib\\underscore-plus.js",
        "node_modules\\underscore-plus\\node_modules\\underscore\\underscore-min.js",
        "node_modules\\underscore-plus\\node_modules\\underscore\\underscore.js"
      ],
      ".json": [
        "node_modules\\emissary\\node_modules\\harmony-collections\\package.json",
        "node_modules\\emissary\\node_modules\\mixto\\package.json",
        "node_modules\\emissary\\node_modules\\property-accessors\\node_modules\\harmony-collections\\package.json",
        "node_modules\\emissary\\node_modules\\property-accessors\\package.json",
        "node_modules\\emissary\\package.json",
        "node_modules\\underscore-plus\\node_modules\\underscore\\package.json",
        "node_modules\\underscore-plus\\package.json",
        "package.json"
      ]
    },
    "folders": [
      {
        "paths": [
          "lib",
          ""
        ],
        "dependencies": {
          "emissary": "1.x",
          "underscore-plus": "1.x"
        }
      },
      {
        "paths": [
          "node_modules\\emissary\\lib",
          "node_modules\\emissary"
        ],
        "dependencies": {
          "underscore-plus": "1.x",
          "mixto": "1.x",
          "property-accessors": "^1.1"
        }
      },
      {
        "paths": [
          "node_modules\\emissary\\node_modules\\property-accessors\\lib",
          "node_modules\\emissary\\node_modules\\property-accessors"
        ],
        "dependencies": {
          "mixto": "1.x"
        }
      },
      {
        "paths": [
          "node_modules\\underscore-plus\\lib",
          "node_modules\\underscore-plus"
        ],
        "dependencies": {
          "underscore": "~1.6.0"
        }
      }
    ]
  }
}