# Your keymap
#
# Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors
# to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/customizing-atom#customizing-key-bindings
# * https://atom.io/docs/latest/advanced/keymaps
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# vim-mode
'atom-text-editor.vim-mode:not(.normal-mode)':
 'j k': 'vim-mode:activate-normal-mode'
'atom-text-editor.vim-mode.normal-mode':
  'g c c': 'editor:toggle-line-comments'
  'space w': 'core:save'
  'space q': 'core:close'
  'space p': 'fuzzy-finder:toggle-file-finder'
'atom-text-editor.vim-mode.visual-mode':
  'g c': 'editor:toggle-line-comments'

'.fuzzy-finder atom-text-editor[mini]':
  'ctrl-v': 'pane:split-right'
  'ctrl-s': 'pane:split-down'

'.tree-view':
  'L': 'tree-view:recursive-expand-directory'
  'H': 'tree-view:recursive-collapse-directory'

'.platform-linux, .platform-linux .command-palette atom-text-editor':
  'f1': 'command-palette:toggle'
